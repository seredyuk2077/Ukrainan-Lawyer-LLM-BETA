// @ts-ignore - Deno edge function imports
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
// @ts-ignore - Deno edge function imports
import OpenAI from "https://esm.sh/openai@4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
};

// Types
interface Document {
  id: string;
  title: string;
  url?: string;
  content?: string;
  law_number?: string;
  document_type?: string;
  source_url?: string;
  articles?: Article[];
  snippet?: string;
  score?: number;
  rank?: number;
}

interface Article {
  number: string;
  title: string;
  content: string;
  section?: number;
}

interface QuestionAnalysis {
  originalMessage: string;
  categories: string[];
  primaryCategory: string;
  keywords: string[];
  complexity: string;
}

interface ScoredDocument extends Document {
  score: number;
}

// Rada API Parser –¥–ª—è edge —Ñ—É–Ω–∫—Ü—ñ—ó
class RadaApiParser {
  private baseUrl = 'https://data.rada.gov.ua';
  private tokenUrl = 'https://data.rada.gov.ua/api/token';
  private userAgent = 'OpenData';
  private token: string | null = null;
  private tokenExpiry: number | null = null;

  async getToken(): Promise<string | null> {
    try {
      if (this.token && this.tokenExpiry && Date.now() < this.tokenExpiry) {
        console.log('üîë Using cached Rada API token');
        return this.token;
      }

      console.log('üîë Getting new Rada API token...');
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);
      
      const response = await fetch(this.tokenUrl, {
        headers: { 'User-Agent': this.userAgent },
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.warn(`‚ùå Token request failed: HTTP ${response.status}`);
        return null;
      }

      const tokenData = await response.json();
      this.token = tokenData.token;
      this.tokenExpiry = Date.now() + (tokenData.expire * 1000);
      
      console.log('‚úÖ Rada API token obtained successfully');
      return this.token;

    } catch (error) {
      console.warn('‚ùå Failed to get Rada API token:', error);
      return null;
    }
  }

  async searchLaws(keywords: string[], limit: number = 3): Promise<Document[]> {
    try {
      console.log('üîç Searching laws via Rada API', { keywords, limit });

      const token = await this.getToken();
      
      // –†–æ–∑—à–∏—Ä—é—î–º–æ –ø–æ—à—É–∫–æ–≤—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
      const expandedKeywords = this.expandSearchTerms(keywords);
      console.log('üîç Expanded search terms:', expandedKeywords);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É (–æ–±–º–µ–∂–µ–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
      const searchUrls = [
        `${this.baseUrl}/laws/main/a`,      // –í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ 1 (–Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è –ö–£–ê–ü)
        `${this.baseUrl}/laws/main/r`       // –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      ];
      
      const allDocuments: Document[] = [];
      
      // –ü–æ—à—É–∫ –≤ —Ä—ñ–∑–Ω–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
      for (const url of searchUrls) {
        try {
          console.log(`üìñ –ü–æ—à—É–∫ –≤: ${url}`);
          
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 15000);
          
          const response = await fetch(url, {
            headers: {
              'User-Agent': token || this.userAgent,
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Accept-Language': 'uk-UA,uk;q=0.9,en;q=0.8'
            },
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);

          if (response.ok) {
            const html = await response.text();
            const documents = this.parseDocumentsFromHtml(html, 50); // –û–±–º–µ–∂—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            allDocuments.push(...documents);
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);
          }
          
          // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
          await new Promise(resolve => setTimeout(resolve, 2000));
          
        } catch (error) {
          console.warn(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤ ${url}:`, error);
        }
      }
      
      // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
      const uniqueDocuments = allDocuments.filter((doc, index, self) => 
        index === self.findIndex(d => d.id === doc.id)
      );
      
      console.log(`üìä –í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: ${uniqueDocuments.length}`);
      
      // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
      const filtered = this.advancedFilterDocuments(uniqueDocuments, expandedKeywords, limit);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω—ñ–≤
      const lawsWithContent = await this.getLawsContent(filtered, token);
      
      console.log('üìä Rada API search results', { 
        found: lawsWithContent.length, 
        keywords: expandedKeywords 
      });
      
      return lawsWithContent;

    } catch (error) {
      console.warn('Rada API search failed:', error);
      return [];
    }
  }

  // –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
  private expandSearchTerms(keywords: string[]): string[] {
    const expanded = [...keywords];
    
    // –î–æ–¥–∞—î–º–æ —Å–∏–Ω–æ–Ω—ñ–º–∏ —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ)
    const synonyms: { [key: string]: string[] } = {
      '—Ç—Ä—É–¥–æ–≤–∏–π': ['–ø—Ä–∞—Ü—è', '—Ä–æ–±–æ—Ç–∞', '–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫', '—Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å'],
      '–¥–æ–≥–æ–≤—ñ—Ä': ['—É–≥–æ–¥–∞', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '–∑–≥–æ–¥–∞'],
      '–ø—Ä–∞–≤–∞': ['–ø—Ä–∞–≤–æ', '–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–Ω—è', '–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å'],
      '–æ–±–æ–≤\'—è–∑–∫–∏': ['–æ–±–æ–≤\'—è–∑–æ–∫', '–∑–æ–±–æ–≤\'—è–∑–∞–Ω–Ω—è', '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å'],
      '–∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è': ['—Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è', '–ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è'],
      '–≤—ñ–¥–ø—É—Å—Ç–∫–∞': ['–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫', '–∫–∞–Ω—ñ–∫—É–ª–∏'],
      '–∑–∞—Ä–æ–±—ñ—Ç–Ω–∞': ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–æ–ø–ª–∞—Ç–∞', '–≤–∏–ø–ª–∞—Ç–∞'],
      '–Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å': ['–º–∞–π–Ω–æ', '–±—É–¥–∏–Ω–æ–∫', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∑–µ–º–ª—è'],
      '–∫—É–ø—ñ–≤–ª—è': ['–ø—Ä–∏–¥–±–∞–Ω–Ω—è', '–ø–æ–∫—É–ø–∫–∞'],
      '–ø—Ä–æ–¥–∞–∂': ['—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è', '–≤—ñ–¥—á—É–∂–µ–Ω–Ω—è'],
      // –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –¢–ï–†–ú–Ü–ù–ò
      '—à—Ç—Ä–∞—Ñ': ['–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —à—Ç—Ä–∞—Ñ', '–≥—Ä–æ—à–æ–≤–µ —Å—Ç—è–≥–Ω–µ–Ω–Ω—è', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è'],
      '–ø–æ—Ä—É—à–µ–Ω–Ω—è': ['–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª', '–ø–æ—Ä—É—à–µ–Ω–Ω—è –∑–∞–∫–æ–Ω—É'],
      '–¥–æ—Ä–æ–∂–Ω—ñ': ['–¥–æ—Ä–æ–∂–Ω—ñ–π —Ä—É—Ö', '–ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—É—Ö—É', '–ü–î–†', '–¥–æ—Ä–æ–∂–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞'],
      '–∫–∞—Ä–∞–Ω—Ç–∏–Ω': ['–∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ñ –∑–∞—Ö–æ–¥–∏', '–µ–ø—ñ–¥–µ–º—ñ–æ–ª–æ–≥—ñ—á–Ω—ñ –∑–∞—Ö–æ–¥–∏', '—Å–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –Ω–æ—Ä–º–∏'],
      '—Ç–æ—Ä–≥–æ–≤–µ–ª—å': ['–ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ', '—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å', '—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞'],
      '–±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ': ['–ø—Ä–∞–≤–∏–ª–∞ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞', '–±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –Ω–æ—Ä–º–∏', '–±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞'],
      '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤': ['–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ']
    };

    keywords.forEach(keyword => {
      const lowerKeyword = keyword.toLowerCase();
      if (synonyms[lowerKeyword]) {
        expanded.push(...synonyms[lowerKeyword]);
      }
      
      // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
      if (lowerKeyword.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤')) {
        expanded.push('—à—Ç—Ä–∞—Ñ', '–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '–∫–æ–¥–µ–∫—Å');
      }
      if (lowerKeyword.includes('–¥–æ—Ä–æ–∂–Ω—ñ') || lowerKeyword.includes('–ø—Ä–∞–≤–∏–ª–∞')) {
        expanded.push('–ü–î–†', '–¥–æ—Ä–æ–∂–Ω—ñ–π —Ä—É—Ö', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
      }
      if (lowerKeyword.includes('—à—Ç—Ä–∞—Ñ') || lowerKeyword.includes('–ø–æ–∫–∞—Ä–∞–Ω–Ω—è')) {
        expanded.push('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∫–æ–¥–µ–∫—Å');
      }
    });

    // –î–æ–¥–∞—î–º–æ —é—Ä–∏–¥–∏—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    const legalTerms = ['–∑–∞–∫–æ–Ω', '–∫–æ–¥–µ–∫—Å', '–ø–æ—Å—Ç–∞–Ω–æ–≤–∞', '—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è', '—É–∫–∞–∑', '—Å—Ç–∞—Ç—Ç—è', '–ø—É–Ω–∫—Ç'];
    expanded.push(...legalTerms);

    return [...new Set(expanded)]; // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
  }

  // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  private advancedFilterDocuments(documents: Document[], keywords: string[], limit: number): Document[] {
    const scoredDocuments = documents.map(doc => {
      let score = 0;
      const title = doc.title.toLowerCase();
      
      // –ë–∞–∑–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–±—ñ–≥ –≤ –Ω–∞–∑–≤—ñ
      keywords.forEach(keyword => {
        const lowerKeyword = keyword.toLowerCase();
        if (title.includes(lowerKeyword)) {
          score += 2; // –í–∏—Å–æ–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–±—ñ–≥ –≤ –Ω–∞–∑–≤—ñ
        }
      });

      // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
      if (title.includes('—Ç—Ä—É–¥–æ–≤–∏–π') && keywords.some(k => k.toLowerCase().includes('—Ç—Ä—É–¥–æ–≤–∏–π'))) {
        score += 5;
      }
      if (title.includes('—Ü–∏–≤—ñ–ª—å–Ω–∏–π') && keywords.some(k => k.toLowerCase().includes('—Ü–∏–≤—ñ–ª—å–Ω–∏–π'))) {
        score += 5;
      }
      if (title.includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π') && keywords.some(k => k.toLowerCase().includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π'))) {
        score += 5;
      }
      
      // –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –ë–û–ù–£–°–ò
      if (title.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤') && keywords.some(k => k.toLowerCase().includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤'))) {
        score += 5;
      }
      if (title.includes('—à—Ç—Ä–∞—Ñ') && keywords.some(k => k.toLowerCase().includes('—à—Ç—Ä–∞—Ñ'))) {
        score += 4;
      }
      if (title.includes('–ø–æ—Ä—É—à–µ–Ω–Ω—è') && keywords.some(k => k.toLowerCase().includes('–ø–æ—Ä—É—à–µ–Ω–Ω—è'))) {
        score += 4;
      }
      if (title.includes('–¥–æ—Ä–æ–∂–Ω—ñ') && keywords.some(k => k.toLowerCase().includes('–¥–æ—Ä–æ–∂–Ω—ñ'))) {
        score += 4;
      }
      if (title.includes('–∫–∞—Ä–∞–Ω—Ç–∏–Ω') && keywords.some(k => k.toLowerCase().includes('–∫–∞—Ä–∞–Ω—Ç–∏–Ω'))) {
        score += 4;
      }
      if (title.includes('—Ç–æ—Ä–≥–æ–≤–µ–ª—å') && keywords.some(k => k.toLowerCase().includes('—Ç–æ—Ä–≥–æ–≤–µ–ª—å'))) {
        score += 4;
      }

      // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–¥–µ–∫—Å–∏ (–≤–∏—â–∏–π –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö)
      if (title.includes('–∫–æ–¥–µ–∫—Å')) {
        if (title.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤')) {
          score += 5; // –í–∏—â–∏–π –±–æ–Ω—É—Å –¥–ª—è –ö–£–ê–ü
        } else {
          score += 3;
        }
      }

      // –ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫–æ–Ω–∏
      if (title.includes('–∑–∞–∫–æ–Ω')) {
        score += 2;
      }
      
      // –ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∏ —Ç–∞ —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è
      if (title.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞') || title.includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è')) {
        score += 1;
      }

      return { ...doc, score };
    });

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º —Ç–∞ –æ–±–º–µ–∂—É—î–º–æ
    return scoredDocuments
      .filter(doc => doc.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  // –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑–∞–∫–æ–Ω—ñ–≤
  async getLawsContent(documents: Document[], token: string | null): Promise<Document[]> {
    const lawsWithContent: Document[] = [];

    for (const doc of documents) {
      try {
        console.log(`üìÑ Downloading content for: ${doc.title}`);
        
        // –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –¢–Ü–õ–¨–ö–ò TXT –§–û–†–ú–ê–¢ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞–∫–æ–Ω—ñ–≤
        let content = '';
        let lawNumber = doc.id;
        let documentType = '–ù–ü–ê';
        let articles: Article[] = [];

        try {
          console.log(`üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ TXT –¥–ª—è: ${doc.title}`);
          const txtUrl = `${this.baseUrl}/laws/show/${doc.id}.txt`;
          
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000);
          
          const txtResponse = await fetch(txtUrl, {
            headers: {
              'User-Agent': this.userAgent, // –î–ª—è TXT –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenData
              'Accept': 'text/plain'
            },
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);

          if (txtResponse.ok) {
            content = await txtResponse.text();
            lawNumber = this.extractLawNumberFromText(content, doc.id);
            documentType = this.detectDocumentTypeFromText(content);
            articles = this.extractArticlesFromText(content);
            
            console.log(`‚úÖ TXT –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${doc.title} (${content.length} chars, ${articles.length} articles)`);
          } else {
            console.warn(`TXT –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è ${doc.id}: ${txtResponse.status}`);
          }
        } catch (txtError) {
          console.warn('TXT format failed:', txtError);
        }

        if (content && content.length > 100) {
          lawsWithContent.push({
            id: doc.id,
            title: doc.title,
            content: content.substring(0, 10000), // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
            law_number: lawNumber,
            document_type: documentType,
            source_url: doc.url,
            articles: articles,
            snippet: content.substring(0, 300) + '...'
          });
          
          console.log(`‚úÖ Content downloaded: ${doc.title} (${content.length} chars, ${articles.length} articles)`);
        } else {
          console.warn(`‚ö†Ô∏è No content found for: ${doc.title}`);
        }

        // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        await new Promise(resolve => setTimeout(resolve, 500));

      } catch (error) {
        console.warn(`Failed to get content for ${doc.title}:`, error);
      }
    }

    return lawsWithContent;
  }


  // –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –∑ —Ç–µ–∫—Å—Ç—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  private extractArticlesFromText(content: string): Article[] {
    const articles: Article[] = [];
    
    // –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ—à—É–∫—É —Å—Ç–∞—Ç–µ–π (–ø–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏)
    const articlePatterns = [
      /–°—Ç–∞—Ç—Ç—è\s+(\d+)[\s\S]*?(?=–°—Ç–∞—Ç—Ç—è\s+\d+|–†–æ–∑–¥—ñ–ª|–ì–ª–∞–≤–∞|–ß–∞—Å—Ç–∏–Ω–∞|$)/gi,
      /—Å—Ç\.\s*(\d+)[\s\S]*?(?=—Å—Ç\.\s*\d+|$)/gi,
      /(\d+)\.\s*[–ê-–Ø–Ü–á–Ñ“ê][\s\S]*?(?=\d+\.\s*[–ê-–Ø–Ü–á–Ñ“ê]|$)/gi,
      // –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∫–æ–¥–µ–∫—Å—ñ–≤
      /–°—Ç–∞—Ç—Ç—è\s+(\d+)[\s\S]*?(?=–°—Ç–∞—Ç—Ç—è\s+\d+|–ü—É–Ω–∫—Ç|–ü—ñ–¥–ø—É–Ω–∫—Ç|$)/gi,
      // –î–ª—è –∑–∞–∫–æ–Ω—ñ–≤ –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é
      /(\d+)\.[\s]*[–ê-–Ø–Ü–á–Ñ“ê][\s\S]*?(?=\d+\.[\s]*[–ê-–Ø–Ü–á–Ñ“ê]|$)/gi
    ];
    
    for (const pattern of articlePatterns) {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        const articleNumber = match[1];
        const articleContent = match[0].trim();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥—É–±–ª—ñ–∫–∞—Ç —Ç–∞ —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–≤–≥–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const exists = articles.some(art => art.number === articleNumber);
        if (!exists && articleContent.length > 30) {
          articles.push({
            number: articleNumber,
            title: `–°—Ç–∞—Ç—Ç—è ${articleNumber}`,
            content: articleContent,
            section: articles.length + 1
          });
        }
      }
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–∞—Ç—Ç—ñ
    articles.sort((a, b) => {
      const numA = parseInt(a.number) || 0;
      const numB = parseInt(b.number) || 0;
      return numA - numB;
    });
    
    return articles;
  }


  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  private detectDocumentTypeFromText(content: string): string {
    const text = content.toLowerCase();

    if (text.includes('–∫–æ–¥–µ–∫—Å —É–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è')) {
      return '–ö–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è';
    } else if (text.includes('–∫–æ–¥–µ–∫—Å —É–∫—Ä–∞—ó–Ω–∏')) {
      return '–ö–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏';
    } else if (text.includes('–∑–∞–∫–æ–Ω —É–∫—Ä–∞—ó–Ω–∏')) {
      return '–ó–∞–∫–æ–Ω –£–∫—Ä–∞—ó–Ω–∏';
    } else if (text.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞')) {
      return '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞';
    } else if (text.includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è')) {
      return '–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è';
    } else if (text.includes('—É–∫–∞–∑')) {
      return '–£–∫–∞–∑';
    } else if (text.includes('–Ω–∞–∫–∞–∑')) {
      return '–ù–∞–∫–∞–∑';
    } else if (text.includes('—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è')) {
      return '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è';
    } else {
      return '–ù–ü–ê';
    }
  }

  // –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—É –∑ —Ç–µ–∫—Å—Ç—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  private extractLawNumberFromText(content: string, fallbackId: string): string {
    // –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ—à—É–∫—É –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—É
    const lawPatterns = [
      /(?:–ó–∞–∫–æ–Ω|–ü–æ—Å—Ç–∞–Ω–æ–≤–∞|–ö–æ–¥–µ–∫—Å|–£–∫–∞–∑|–ù–∞–∫–∞–∑|–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è|–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è)\s+(?:–£–∫—Ä–∞—ó–Ω–∏\s+)?‚Ññ?\s*(\d+[-\w]*)/i,
      /‚Ññ\s*(\d+[-\w]*)/i,
      /(\d{4,}-\d{2,}-\d{2,})/i, // –§–æ—Ä–º–∞—Ç n0388500-25
      /(\d{4}\/\d{2}\/\d{2})/i,  // –§–æ—Ä–º–∞—Ç 2020/12/25
      /(\d{4}\.\d{2}\.\d{2})/i   // –§–æ—Ä–º–∞—Ç 2020.12.25
    ];
    
    for (const pattern of lawPatterns) {
      const match = content.match(pattern);
      if (match) {
        return match[1];
      }
    }
    
    return fallbackId;
  }

  private parseDocumentsFromHtml(html: string, limit: number): Document[] {
    const documents: Document[] = [];
    
    try {
      // –ü–∞—Ä—Å–∏–º–æ HTML –¥–ª—è –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <li><a href="https://data.rada.gov.ua/laws/meta/ID">–ù–ê–ó–í–ê</a></li>
      const linkMatches = html.match(/href="https:\/\/data\.rada\.gov\.ua\/laws\/meta\/([^"]+)"/g) || [];
      
      console.log(`üîç HTML –ø–∞—Ä—Å–∏–Ω–≥: –∑–Ω–∞–π–¥–µ–Ω–æ ${linkMatches.length} –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏`);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      for (let i = 0; i < Math.min(linkMatches.length, limit); i++) {
        const linkMatch = linkMatches[i];
        
        try {
          // –í–∏—Ç—è–≥—É—î–º–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
          const idMatch = linkMatch.match(/\/laws\/meta\/([^"]+)/);
          if (!idMatch) continue;
          
          const docId = idMatch[1];
          
          // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞)
          const linkStart = html.indexOf(linkMatch);
          const linkEnd = html.indexOf('</a>', linkStart);
          const linkContent = html.substring(linkStart, linkEnd);
          
          // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
          const titleMatch = linkContent.match(/>([^<]+)</);
          if (!titleMatch) continue;
          
          const title = titleMatch[1].trim();
          
          if (title && title.length > 10) {
            documents.push({
              id: docId,
              title: title,
              url: `${this.baseUrl}/laws/show/${docId}`
            });
          }
          
        } catch (parseError) {
          console.warn('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', parseError);
        }
      }
      
      console.log(`‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);
      
    } catch (error) {
      console.warn('HTML parsing failed:', error);
    }
    
    return documents;
  }

  private filterDocumentsByKeywords(documents: Document[], searchQuery: string, limit: number): Document[] {
    const keywords = searchQuery.toLowerCase().split(' ');
    
    const filtered = documents.filter(doc => {
      const title = doc.title.toLowerCase();
      return keywords.some(keyword => title.includes(keyword));
    });

    return filtered.slice(0, limit);
  }
}

// Legal Agent –¥–ª—è edge —Ñ—É–Ω–∫—Ü—ñ—ó
class LegalAgent {
  private legalCategories = {
    '—Ü–∏–≤—ñ–ª—å–Ω–µ': ['–¥–æ–≥–æ–≤—ñ—Ä', '–≤–ª–∞—Å–Ω—ñ—Å—Ç—å', '—Å–ø–∞–¥—â–∏–Ω–∞', '—à–∫–æ–¥–∞', '–≤—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è', '–∫—É–ø—ñ–≤–ª—è', '–ø—Ä–æ–¥–∞–∂'],
    '—Ç—Ä—É–¥–æ–≤–µ': ['—Ä–æ–±–æ—Ç–∞', '–∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞', '–≤—ñ–¥–ø—É—Å—Ç–∫–∞', '–∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è', '—Ç—Ä—É–¥–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä', '—Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å', '–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫'],
    '—Å—ñ–º–µ–π–Ω–µ': ['—à–ª—é–±', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '–¥—ñ—Ç–∏', '–∞–ª—ñ–º–µ–Ω—Ç–∏', '—Å—ñ–º\'—è', '–ø–æ–¥—Ä—É–∂–∂—è'],
    '–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ': ['–∑–ª–æ—á–∏–Ω', '–∫—Ä–∏–º—ñ–Ω–∞–ª', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '–≤–±–∏–≤—Å—Ç–≤–æ', '–∫—Ä–∞–¥—ñ–∂–∫–∞', '—à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ'],
    '–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–µ': ['–±—ñ–∑–Ω–µ—Å', '–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ', '–≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–æ', '–∫–æ–º–µ—Ä—Ü—ñ—è', '—Ç–æ—Ä–≥—ñ–≤–ª—è', '–§–û–ü'],
    '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ': [
      '—à—Ç—Ä–∞—Ñ', '–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ', '–ø–æ–ª—ñ—Ü—ñ—è', '–ø—Ä–æ—Ç–æ–∫–æ–ª',
      '–¥–æ—Ä–æ–∂–Ω—ñ', '–ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—É—Ö—É', '–ü–î–†', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      '–∫–∞—Ä–∞–Ω—Ç–∏–Ω', '—Å–∞–Ω—ñ—Ç–∞—Ä–Ω—ñ –Ω–æ—Ä–º–∏', '–µ–ø—ñ–¥–µ–º—ñ–æ–ª–æ–≥—ñ—á–Ω—ñ –∑–∞—Ö–æ–¥–∏',
      '—Ç–æ—Ä–≥–æ–≤–µ–ª—å', '–ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ', '—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å',
      '–±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ', '–±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –Ω–æ—Ä–º–∏', '–±—É–¥—ñ–≤–µ–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞',
      '–∫–æ–¥–µ–∫—Å —É–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∫—É–∞–ø'
    ]
  };

  analyzeQuestion(message: string): QuestionAnalysis {
    const lowerMessage = message.toLowerCase();
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–∞–≤–∞
    const categories: { category: string; score: number }[] = [];
    Object.entries(this.legalCategories).forEach(([category, keywords]) => {
      const matchCount = keywords.filter(keyword => 
        lowerMessage.includes(keyword)
      ).length;
      if (matchCount > 0) {
        categories.push({ category, score: matchCount });
      }
    });

    categories.sort((a, b) => b.score - a.score);

    // –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
    const stopWords = new Set([
      '—â–æ', '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '—á–æ–º—É', '—Ö—Ç–æ', '—è–∫–∏–π', '—è–∫–∞', '—è–∫–µ',
      '–∞–ª–µ', '–∞–±–æ', '—Ç–∞', '—ñ', '–≤', '–Ω–∞', '–∑', '–¥–æ', '–≤—ñ–¥', '–ø—Ä–æ',
      '–¥–ª—è', '–∑–∞', '–ø—ñ–¥', '–Ω–∞–¥', '–º—ñ–∂', '—Å–µ—Ä–µ–¥', '–±–µ–∑', '—á–µ—Ä–µ–∑'
    ]);

    const keywords = message
      .toLowerCase()
      .replace(/[^\u0400-\u04FF\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2 && !stopWords.has(word))
      .slice(0, 10);

    return {
      originalMessage: message,
      categories: categories.map(c => c.category),
      primaryCategory: categories[0]?.category || '–∑–∞–≥–∞–ª—å–Ω–µ',
      keywords,
      complexity: this.assessComplexity(message)
    };
  }

  private assessComplexity(message: string): string {
    const indicators = {
      simple: ['—â–æ', '—è–∫', '–¥–µ', '–∫–æ–ª–∏'],
      medium: ['–¥–æ–≥–æ–≤—ñ—Ä', '–ø—Ä–∞–≤–∞', '–æ–±–æ–≤\'—è–∑–∫–∏', '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å'],
      complex: ['—Å—É–ø–µ—Ä–µ—á–∫–∞', '–ø–æ–∑–æ–≤', '—Å—É–¥', '—Ä–æ–∑–≥–ª—è–¥', '–∞–ø–µ–ª—è—Ü—ñ—è', '–∫–∞—Å–∞—Ü—ñ—è']
    };

    let score = 0;
    Object.entries(indicators).forEach(([level, words]) => {
      const matches = words.filter(word => message.toLowerCase().includes(word)).length;
      if (level === 'simple') score += matches * 1;
      if (level === 'medium') score += matches * 2;
      if (level === 'complex') score += matches * 3;
    });

    if (score <= 2) return 'simple';
    if (score <= 5) return 'medium';
    return 'complex';
  }

  async searchInDatabase(supabase: any, keywords: string[], limit: number): Promise<Document[]> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–º–∏ —Ç–µ—Ä–º—ñ–Ω–∞–º–∏
      const adminKeywords = ['–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤', '–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–∫—É–∞–ø', '—à—Ç—Ä–∞—Ñ', '–ø–æ–ª—ñ—Ü—ñ—è'];
      const hasAdminTerms = keywords.some(k => adminKeywords.some(ak => k.toLowerCase().includes(ak)));
      
      let data = [];
      
      if (hasAdminTerms) {
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
        const { data: adminData, error: adminError } = await supabase
          .from('legal_laws')
          .select('id, title, content, law_number, source_url, articles, category')
          .ilike('title', '%–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤%')
          .limit(10);
        
        if (!adminError && adminData) {
          data = adminData;
          console.log(`Found ${data.length} administrative laws`);
        }
      }
      
      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∞–±–æ –Ω–µ –±—É–ª–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
      if (data.length === 0) {
        const { data: allLaws, error: allError } = await supabase
          .from('legal_laws')
          .select('id, title, content, law_number, source_url, articles, category')
          .limit(50);
        
        if (allError) {
          console.warn('All laws search error:', allError);
          return [];
        }
        data = allLaws;
      }

      // Filter results using text search
      const filteredResults = data.filter((row: any) => {
        const text = `${row.title} ${row.content}`.toLowerCase();
        return keywords.some(keyword => text.includes(keyword.toLowerCase()));
      });

      return filteredResults
        .map((row: any) => ({
          ...row,
          rank: this.calculateRelevanceScore(row, keywords)
        }))
        .sort((a: any, b: any) => b.rank - a.rank)
        .slice(0, limit) as Document[];

    } catch (error) {
      console.warn('Database search failed:', error);
      return [];
    }
  }

  private calculateRelevanceScore(row: Document, keywords: string[]): number {
    let score = 0;
    const title = row.title ? row.title.toLowerCase() : '';
    const content = row.content ? row.content.toLowerCase() : '';
    
    // –ë–∞–∑–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–±—ñ–≥ –≤ –Ω–∞–∑–≤—ñ
    keywords.forEach(keyword => {
      const lowerKeyword = keyword.toLowerCase();
      if (title.includes(lowerKeyword)) {
        score += 3.0; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–±—ñ–≥ –≤ –Ω–∞–∑–≤—ñ
      }
      if (content.includes(lowerKeyword)) {
        score += 1.0; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–±—ñ–≥ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
      }
    });

    // –ë–æ–Ω—É—Å –∑–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    if (title.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤') && keywords.some(k => k.toLowerCase().includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤'))) {
      score += 10; // –í–∏—Å–æ–∫–∏–π –±–æ–Ω—É—Å –¥–ª—è –ö–£–ê–ü
    }
    if (title.includes('–∫–æ–¥–µ–∫—Å') && title.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤')) {
      score += 15; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å –¥–ª—è –ö–£–ê–ü
    }
    if (title.includes('–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è') && keywords.some(k => k.toLowerCase().includes('–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω–Ω—è'))) {
      score += 8;
    }
    if (title.includes('—à—Ç—Ä–∞—Ñ') && keywords.some(k => k.toLowerCase().includes('—à—Ç—Ä–∞—Ñ'))) {
      score += 5;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π (–ö–£–ê–ü –º–∞—î 786 —Å—Ç–∞—Ç–µ–π)
    if (row.articles && Array.isArray(row.articles)) {
      score += Math.min(row.articles.length * 0.1, 5); // –î–æ 5 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤
    }
    
    return score;
  }

  buildEnhancedContext(questionAnalysis: QuestionAnalysis, relevantContext: { laws: Document[] }, conversationHistory: any[]): string {
    let context = `–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —é—Ä–∏—Å—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç.

–ü–†–ê–í–ò–õ–ê:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. –¶–∏—Ç—É–π —Å—Ç–∞—Ç—Ç—ñ: "—Å—Ç. X –ù–∞–∑–≤–∞ –∑–∞–∫–æ–Ω—É"
4. –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó - —Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ
5. –ù–µ –≤–∏–≥–∞–¥—É–π –∑–∞–∫–æ–Ω–∏

–§–û–†–ú–ê–¢: —Ä–µ–∑—é–º–µ ‚Üí –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

`;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –∑–∞–∫–æ–Ω—ñ–≤ –∑ —Å—Ç–∞—Ç—Ç—è–º–∏
    if (relevantContext.laws && relevantContext.laws.length > 0) {
      context += '–ó–ê–ö–û–ù–ò:\n';
      
      relevantContext.laws.slice(0, 2).forEach((law: Document, index: number) => {
        context += `${index + 1}. ${law.title}\n`;
        if (law.law_number) context += `   ‚Ññ: ${law.law_number}\n`;
        if (law.document_type) context += `   –¢–∏–ø: ${law.document_type}\n`;
        
        // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—Ç—ñ —è–∫—â–æ —î
        if (law.articles && law.articles.length > 0) {
          context += `   –°–¢–ê–¢–¢–Ü:\n`;
          law.articles.slice(0, 3).forEach((article: Article) => {
            context += `   - ${article.title}: ${article.content.substring(0, 200)}...\n`;
          });
        } else {
          // –Ø–∫—â–æ —Å—Ç–∞—Ç–µ–π –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
          if (law.content) {
            const shortContent = law.content.substring(0, 300);
            context += `   ${shortContent}${law.content.length > 300 ? '...' : ''}\n`;
          }
        }
        context += '\n';
      });
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏
    if (conversationHistory.length > 0) {
      const lastMessage = conversationHistory[conversationHistory.length - 1];
      context += `–ü–û–ü–ï–†–ï–î–ù–Ñ: ${lastMessage.role}: ${lastMessage.content}\n\n`;
    }

    context += `P–ò–¢–ê–ù–ù–Ø: ${questionAnalysis.originalMessage}\n\n`;
    context += `–í–Ü–î–ü–û–í–Ü–î–¨:`;

    return context;
  }

  // –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
  async searchSpecificArticle(lawId: string, articleNumber: string, supabase: any): Promise<{ law: Document; article: Article } | null> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const { data: laws, error } = await supabase
        .from('legal_laws')
        .select('*')
        .eq('id', lawId)
        .single();

      if (error || !laws) {
        return null;
      }

      // –®—É–∫–∞—î–º–æ —Å—Ç–∞—Ç—Ç—é –≤ articles –ø–æ–ª—ñ
      if (laws.articles && Array.isArray(laws.articles)) {
        const article = laws.articles.find((art: Article) => art.number === articleNumber);
        if (article) {
          return {
            law: laws,
            article: article
          };
        }
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–∞—Ä—Å–∏–º–æ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      if (laws.content) {
        const articleRegex = new RegExp(`–°—Ç–∞—Ç—Ç—è\\s+${articleNumber}[\\s\\S]*?(?=–°—Ç–∞—Ç—Ç—è\\s+\\d+|$)`, 'gi');
        const match = laws.content.match(articleRegex);
        
        if (match) {
          return {
            law: laws,
            article: {
              number: articleNumber,
              title: `–°—Ç–∞—Ç—Ç—è ${articleNumber}`,
              content: match[0].trim()
            }
          };
        }
      }

      return null;
    } catch (error) {
      console.warn('Error searching specific article:', error);
      return null;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Å—Ç–∞—Ç—Ç—ñ –≤ –∑–∞–∫–æ–Ω–∞—Ö
  hasArticles(laws: Document[]): boolean {
    return laws.some(law => law.articles && Array.isArray(law.articles) && law.articles.length > 0);
  }
}

Deno.serve(async (req) => {
  // Generate unique request ID for logging
  const requestId = crypto.randomUUID();
  
  const headersObj: Record<string, string> = {};
  req.headers.forEach((value, key) => {
    headersObj[key] = value;
  });
  
  console.log(`[${requestId}] Request received:`, {
    method: req.method,
    url: req.url,
    headers: headersObj
  });

  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 204, headers: corsHeaders });
  }

  try {
    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL') || 'https://lhltmmzwvikdgxxakbcl.supabase.co';
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || Deno.env.get('SUPABASE_ANON_KEY');
    console.log(`[${requestId}] Supabase URL: ${supabaseUrl}`);
    console.log(`[${requestId}] Supabase key: ${supabaseKey ? '***' + supabaseKey.slice(-4) : 'NOT SET'}`);
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Supabase environment variables not set');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Initialize OpenAI client
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openaiApiKey) {
      throw new Error('OPENAI_API_KEY environment variable is not set');
    }

    const openai = new OpenAI({
      apiKey: openaiApiKey
    });

    // Initialize services
    const radaParser = new RadaApiParser();
    const legalAgent = new LegalAgent();

    let body;
    try {
      body = await req.json();
    } catch (error) {
      console.error(`[${requestId}] Invalid JSON:`, error);
      return new Response(
        JSON.stringify({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { messages, sessionId, userMessage } = body;

    if (!sessionId) {
      return new Response(
        JSON.stringify({ error: 'Session ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`[${requestId}] Processing chat request:`, {
      sessionId: sessionId.substring(0, 8),
      messageCount: messages?.length || 0,
      hasUserMessage: !!userMessage
    });

    // Verify session exists
    const { data: session, error: sessionError } = await supabase
      .from('chat_sessions')
      .select('*')
      .eq('id', sessionId)
      .eq('is_active', true)
      .single();

    if (sessionError || !session) {
      console.error(`[${requestId}] Session not found:`, sessionError);
      return new Response(
        JSON.stringify({ error: '–°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Save user message if provided
    if (userMessage) {
      const { error: userMsgError } = await supabase
        .from('chat_messages')
        .insert({
          session_id: sessionId,
          role: 'user',
          content: userMessage,
          tokens_used: 0
        });

      if (userMsgError) {
        console.error(`[${requestId}] Error saving user message:`, userMsgError);
        return new Response(
          JSON.stringify({ error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
    }

    // –ê–Ω–∞–ª—ñ–∑ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    let enhancedContext = '';
    let sources: { title: string; url?: string; lawNumber?: string; articles: Article[] }[] = [];
    
    if (userMessage) {
      console.log(`[${requestId}] Analyzing question and searching for relevant laws...`);
      
      const questionAnalysis = legalAgent.analyzeQuestion(userMessage);
      console.log(`[${requestId}] Question analysis:`, {
        categories: questionAnalysis.categories,
        primaryCategory: questionAnalysis.primaryCategory,
        keywords: questionAnalysis.keywords,
        complexity: questionAnalysis.complexity
      });

      // –ü–æ—à—É–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const dbResults = await legalAgent.searchInDatabase(supabase, questionAnalysis.keywords, 2);
      console.log(`[${requestId}] Database search results:`, { found: dbResults.length });

      // –ó–ê–í–ñ–î–ò —à—É–∫–∞—î–º–æ —á–µ—Ä–µ–∑ Rada API –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–∫–æ–Ω—ñ–≤
      console.log(`[${requestId}] Searching via Rada API for fresh laws...`);
      const apiResults = await radaParser.searchLaws(questionAnalysis.keywords, 3);
      console.log(`[${requestId}] Rada API results:`, { found: apiResults.length });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–∫–æ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
      if (apiResults.length > 0) {
        console.log(`[${requestId}] Saving new laws to database...`);
        try {
          for (const law of apiResults) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–∫–æ–Ω –≤–∂–µ —ñ—Å–Ω—É—î
            const { data: existingLaw } = await supabase
              .from('legal_laws')
              .select('id, content, articles')
              .eq('id', law.id)
              .single();

            // –Ø–∫—â–æ –∑–∞–∫–æ–Ω —ñ—Å–Ω—É—î –∞–ª–µ –Ω–µ –º–∞—î –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∞–±–æ —Å—Ç–∞—Ç–µ–π, –æ–Ω–æ–≤–ª—é—î–º–æ
            if (existingLaw && (!existingLaw.content || existingLaw.content.length < 500 || !existingLaw.articles || existingLaw.articles.length === 0)) {
              console.log(`[${requestId}] Updating existing law with full content: ${law.title}`);
              await supabase
                .from('legal_laws')
                .update({
                  content: law.content,
                  articles: law.articles || [],
                  updated_at: new Date().toISOString()
                })
                .eq('id', law.id);
            } else if (!existingLaw) {
              // –Ø–∫—â–æ –∑–∞–∫–æ–Ω –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
              console.log(`[${requestId}] Creating new law: ${law.title}`);
              await supabase
                .from('legal_laws')
                .insert({
                  id: law.id,
                  title: law.title,
                  content: law.content,
                  law_number: law.law_number,
                  category: law.document_type,
                  source_url: law.source_url,
                  articles: law.articles || [],
                  keywords: questionAnalysis.keywords,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString()
                });
            }
          }
          console.log(`[${requestId}] Processed ${apiResults.length} laws in database`);
        } catch (saveError) {
          console.warn(`[${requestId}] Failed to save laws to database:`, saveError);
        }
      }

      // –û–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–∏–º –∑–∞–∫–æ–Ω–∞–º)
      const allResults = [...apiResults, ...dbResults];
      sources = allResults.map(r => ({
        title: r.title,
        url: r.source_url || r.url,
        lawNumber: r.law_number,
        articles: r.articles || []
      }));

      // –ë—É–¥—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      enhancedContext = legalAgent.buildEnhancedContext(
        questionAnalysis, 
        { laws: allResults }, 
        messages || []
      );

      console.log(`[${requestId}] Enhanced context built:`, {
        contextLength: enhancedContext.length,
        sourcesCount: sources.length
      });
    }

    // Prepare messages for OpenAI
    const recentMessages = messages ? messages.slice(-3) : [];
    const openaiMessages = [
      { role: 'system', content: enhancedContext || '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —é—Ä–∏—Å—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' },
      ...recentMessages
    ];

    console.log(`[${requestId}] Calling OpenAI API with ${openaiMessages.length} messages`);

    // Generate AI response
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: openaiMessages,
      max_tokens: 500,
      temperature: 0.1,
      presence_penalty: 0.0,
      frequency_penalty: 0.0
    });

    const aiResponse = completion.choices[0].message.content;
    const tokensUsed = completion.usage?.total_tokens || 0;

    console.log(`[${requestId}] OpenAI response generated:`, {
      model: 'gpt-3.5-turbo',
      responseLength: aiResponse?.length || 0,
      tokensUsed,
      sourcesCount: sources.length
    });

    if (!aiResponse) {
      throw new Error('–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI');
    }

    // Save AI response
    const { error: aiMsgError } = await supabase
      .from('chat_messages')
      .insert({
        session_id: sessionId,
        role: 'assistant',
        content: aiResponse,
        tokens_used: tokensUsed
      });

    if (aiMsgError) {
      console.error(`[${requestId}] Error saving AI message:`, aiMsgError);
      return new Response(
        JSON.stringify({ error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Update session title if it's the first user message
    if (userMessage && messages && messages.filter((m: any) => m.role === 'user').length === 1) {
      const title = userMessage.length > 50 ? userMessage.substring(0, 47) + '...' : userMessage;
      await supabase
        .from('chat_sessions')
        .update({ title })
        .eq('id', sessionId);
    }

    console.log(`[${requestId}] Request completed successfully`);

    return new Response(
      JSON.stringify({
        response: aiResponse,
        tokensUsed,
        sessionId,
        sources: sources
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    const err = error as Error & { status?: number };
    console.error(`[${requestId}] Error in chat function:`, {
      message: err.message,
      stack: err.stack,
      name: err.name
    });

    // Handle specific OpenAI errors
    let errorMessage = '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    let statusCode = 500;

    if (err.status === 429) {
      errorMessage = '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
      statusCode = 429;
    } else if (err.status === 401) {
      errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó API.';
      statusCode = 401;
    } else if (err.status && err.status >= 500) {
      errorMessage = '–°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
      statusCode = 503;
    } else if (err.message.includes('OpenAI')) {
      errorMessage = '–ü–æ–º–∏–ª–∫–∞ AI —Å–µ—Ä–≤—ñ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
    }

    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        requestId 
      }),
      { 
        status: statusCode, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});