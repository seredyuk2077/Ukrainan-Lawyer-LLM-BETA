#!/usr/bin/env node

/**
 * üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–µ–ø–ª–æ—é–≤–∞–Ω–Ω—è Supabase Edge Functions
 * 
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –¥–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ –¥–µ–ø–ª–æ—ó—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * 
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * - node deploy-functions.js                    # –î–µ–ø–ª–æ–π –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
 * - node deploy-functions.js app_78e3d871a2_chat # –î–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
 * - npm run deploy                              # –ß–µ—Ä–µ–∑ npm —Å–∫—Ä–∏–ø—Ç
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${step} ${message}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function execCommand(command, description) {
  try {
    logStep('üîÑ', description);
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    return output;
  } catch (error) {
    logError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: ${command}`);
    logError(error.message);
    if (error.stdout) {
      console.log('STDOUT:', error.stdout);
    }
    if (error.stderr) {
      console.log('STDERR:', error.stderr);
    }
    throw error;
  }
}

function checkSupabaseAuth() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π access token
  const accessToken = process.env.SUPABASE_ACCESS_TOKEN;
  
  if (!accessToken) {
    logError('SUPABASE_ACCESS_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    showTokenInstructions();
    return false;
  }
  
  if (!accessToken.startsWith('sbp_')) {
    logError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω—É. –¢–æ–∫–µ–Ω –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ "sbp_"');
    showTokenInstructions();
    return false;
  }
  
  logSuccess('‚úÖ Access token –∑–Ω–∞–π–¥–µ–Ω–æ');
  logSuccess('‚úÖ –ü—Ä–æ—î–∫—Ç: lhltmmzwvikdgxxakbcl');
  
  return true;
}

function showTokenInstructions() {
  log('\nüîë –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ Supabase Access Token:', 'yellow');
  log('', 'reset');
  log('1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ: https://supabase.com/dashboard', 'cyan');
  log('2. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—Ä–æ—î–∫—Ç', 'cyan');
  log('3. Settings ‚Üí API ‚Üí Project API keys ‚Üí service_role (—Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏)', 'cyan');
  log('', 'reset');
  log('–ê–ë–û:', 'yellow');
  log('', 'reset');
  log('1. –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∞–≤–∞—Ç–∞—Ä ‚Üí Account Settings', 'cyan');
  log('2. Access Tokens ‚Üí Generate new token', 'cyan');
  log('', 'reset');
  log('–ü–æ—Ç—ñ–º –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω:', 'yellow');
  log('export SUPABASE_ACCESS_TOKEN=sbp_–≤–∞—à_—Ç–æ–∫–µ–Ω_—Ç—É—Ç', 'green');
  log('', 'reset');
  log('üìñ –î–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: GET_SUPABASE_TOKEN.md', 'blue');
}

function getFunctions() {
  const functionsDir = path.join(process.cwd(), 'supabase', 'functions');
  
  if (!fs.existsSync(functionsDir)) {
    logError(`–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${functionsDir}`);
    return [];
  }
  
  const functions = fs.readdirSync(functionsDir)
    .filter(item => {
      const itemPath = path.join(functionsDir, item);
      return fs.statSync(itemPath).isDirectory() && 
             fs.existsSync(path.join(itemPath, 'index.ts'));
    });
  
  return functions;
}

function deployFunction(functionName) {
  try {
    logStep('üöÄ', `–î–µ–ø–ª–æ—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó: ${functionName}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—è
    const functionPath = path.join(process.cwd(), 'supabase', 'functions', functionName);
    if (!fs.existsSync(functionPath)) {
      logError(`–§—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${functionName}`);
      return false;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –ø—Ä–æ—î–∫—Ç—É
    try {
      logStep('üîó', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—î–∫—Ç—É...');
      execCommand('supabase link --project-ref lhltmmzwvikdgxxakbcl', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—î–∫—Ç—É lhltmmzwvikdgxxakbcl');
      logSuccess('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –ø—Ä–æ—î–∫—Ç—É!');
    } catch (error) {
      // –ú–æ–∂–ª–∏–≤–æ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –¥–µ–ø–ª–æ—ó—Ç–∏
      logWarning('–ü—Ä–æ—î–∫—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...');
    }
    
    // –î–µ–ø–ª–æ—ó–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    const output = execCommand(
      `supabase functions deploy ${functionName}`,
      `–î–µ–ø–ª–æ—é–≤–∞–Ω–Ω—è ${functionName}...`
    );
    
    logSuccess(`–§—É–Ω–∫—Ü—ñ—è ${functionName} —É—Å–ø—ñ—à–Ω–æ –¥–µ–ø–ª–æ—ó–Ω–∞!`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ URL —Ñ—É–Ω–∫—Ü—ñ—ó
    if (output.includes('https://')) {
      const urlMatch = output.match(/https:\/\/[^\s]+/);
      if (urlMatch) {
        log(`üîó URL: ${urlMatch[0]}`, 'blue');
      }
    }
    
    return true;
  } catch (error) {
    logError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–ø–ª–æ—ó—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é ${functionName}`);
    if (error.message.includes('not linked')) {
      log('–ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –ø—Ä–æ—î–∫—Ç—É: supabase link --project-ref YOUR_PROJECT_ID', 'yellow');
    }
    return false;
  }
}

function deployAllFunctions() {
  const functions = getFunctions();
  
  if (functions.length === 0) {
    logWarning('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –¥–µ–ø–ª–æ—é–≤–∞–Ω–Ω—è');
    return;
  }
  
  log(`\n–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–π: ${functions.length}`, 'blue');
  functions.forEach(func => log(`  - ${func}`, 'cyan'));
  
  let successCount = 0;
  let failCount = 0;
  
  for (const functionName of functions) {
    if (deployFunction(functionName)) {
      successCount++;
    } else {
      failCount++;
    }
  }
  
  log('\n' + '='.repeat(50), 'blue');
  logSuccess(`–£—Å–ø—ñ—à–Ω–æ –¥–µ–ø–ª–æ—ó–Ω–æ: ${successCount} —Ñ—É–Ω–∫—Ü—ñ–π`);
  if (failCount > 0) {
    logError(`–ü–æ–º–∏–ª–∫–∏: ${failCount} —Ñ—É–Ω–∫—Ü—ñ–π`);
  }
}

function showHelp() {
  log('\nüöÄ Supabase Functions Deploy Tool', 'bright');
  log('\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:', 'yellow');
  log('  node deploy-functions.js                    # –î–µ–ø–ª–æ–π –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
  log('  node deploy-functions.js <function-name>    # –î–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó');
  log('  node deploy-functions.js --help             # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É');
  
  log('\n–ü—Ä–∏–∫–ª–∞–¥–∏:', 'yellow');
  log('  node deploy-functions.js app_78e3d871a2_chat');
  log('  npm run deploy');
  
  log('\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:', 'yellow');
  const functions = getFunctions();
  if (functions.length > 0) {
    functions.forEach(func => log(`  - ${func}`, 'cyan'));
  } else {
    log('  –§—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'red');
  }
}

function main() {
  const args = process.argv.slice(2);
  
  // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }
  
  log('üöÄ Supabase Functions Deploy Tool', 'bright');
  log('=' .repeat(50), 'blue');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Supabase CLI
  try {
    execCommand('supabase --version', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Supabase CLI');
  } catch (error) {
    logError('Supabase CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    log('–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å CLI: brew install supabase/tap/supabase', 'yellow');
    process.exit(1);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  if (!checkSupabaseAuth()) {
    process.exit(1);
  }
  
  // –î–µ–ø–ª–æ—é–≤–∞–Ω–Ω—è
  if (args.length === 0) {
    // –î–µ–ø–ª–æ–π –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    deployAllFunctions();
  } else {
    // –î–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    const functionName = args[0];
    deployFunction(functionName);
  }
  
  log('\n‚ú® –ì–æ—Ç–æ–≤–æ!', 'green');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = {
  deployFunction,
  deployAllFunctions,
  getFunctions
};
