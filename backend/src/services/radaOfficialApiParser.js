const axios = require('axios');
const { query } = require('../config/supabase');
const logger = require('../utils/logger');

class RadaOfficialApiParser {
  constructor() {
    this.baseUrl = 'https://data.rada.gov.ua';
    this.apiUrl = 'https://data.rada.gov.ua/laws';
    this.tokenUrl = 'https://data.rada.gov.ua/api/token';
    this.userAgent = 'OpenData'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenData –¥–ª—è TXT —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    this.token = null;
    this.tokenExpiry = null;
    this.requestCount = 0;
    this.lastRequestTime = 0;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è JSON –∑–∞–ø–∏—Ç—ñ–≤
   */
  async getToken() {
    try {
      if (this.token && this.tokenExpiry && Date.now() < this.tokenExpiry) {
        return this.token;
      }

      logger.info('üîë Getting API token...');
      
      const response = await axios.get(this.tokenUrl, {
        headers: {
          'User-Agent': this.userAgent
        },
        timeout: 10000
      });

      // –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const tokenData = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;
      this.token = tokenData.token;
      this.tokenExpiry = Date.now() + (tokenData.expire * 1000); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ expire –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      
      logger.info('‚úÖ API token obtained', { 
        token: this.token.substring(0, 8) + '...',
        expiresIn: tokenData.expire + ' seconds'
      });
      return this.token;

    } catch (error) {
      logger.warn('Failed to get API token, using OpenData mode:', error.message);
      return null;
    }
  }

  /**
   * –î–æ—Ç—Ä–∏–º—É—î–º–æ—Å—è –ª—ñ–º—ñ—Ç—ñ–≤ API –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é (60 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É, –ø–∞—É–∑–∞ 5-7 —Å–µ–∫—É–Ω–¥)
   */
  async respectRateLimit() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    
    // –†–∞–Ω–¥–æ–º–Ω–∞ –ø–∞—É–∑–∞ –≤—ñ–¥ 5 –¥–æ 7 —Å–µ–∫—É–Ω–¥ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
    const minPause = 5000; // 5 —Å–µ–∫—É–Ω–¥
    const maxPause = 7000; // 7 —Å–µ–∫—É–Ω–¥
    const randomPause = Math.floor(Math.random() * (maxPause - minPause + 1)) + minPause;
    
    if (timeSinceLastRequest < randomPause) {
      const remainingPause = randomPause - timeSinceLastRequest;
      logger.info('‚è≥ Respecting rate limit', { 
        pauseMs: remainingPause,
        requestCount: this.requestCount 
      });
      await new Promise(resolve => setTimeout(resolve, remainingPause));
    }
    
    this.lastRequestTime = Date.now();
    this.requestCount++;
  }

  /**
   * –ü–æ—à—É–∫ –∑–∞–∫–æ–Ω—ñ–≤ —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π API
   */
  async searchLaws(keywords, limit = 5) {
    try {
      logger.info('üîç Searching laws via official Rada API', { keywords, limit });

      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
      const token = await this.getToken();
      
      // –§–æ—Ä–º—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
      const searchQuery = this.buildSearchQuery(keywords);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
      const documents = await this.getDocumentsList(searchQuery, limit, token);
      
      if (documents.length === 0) {
        logger.warn('No documents found via official API');
        return [];
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      const laws = await this.getDocumentsDetails(documents, token);
      
      logger.info('‚úÖ Laws found and parsed via official API', { 
        found: laws.length, 
        searched: documents.length 
      });

      return laws;

    } catch (error) {
      logger.error('Error searching laws via official API:', error);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
   */
  buildSearchQuery(keywords) {
    const keywordString = Array.isArray(keywords) ? keywords.join(' ') : keywords;
    
    // –î–æ–¥–∞—î–º–æ —é—Ä–∏–¥–∏—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
    const legalTerms = ['–∑–∞–∫–æ–Ω', '–∫–æ–¥–µ–∫—Å', '–ø–æ—Å—Ç–∞–Ω–æ–≤–∞', '—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è', '—É–∫–∞–∑'];
    const allTerms = [...keywords, ...legalTerms];
    
    return allTerms.join(' ');
  }

  /**
   * –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é API
   */
  async getDocumentsList(searchQuery, limit, token) {
    try {
      await this.respectRateLimit();

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (30 –¥–Ω—ñ–≤) –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
      const documentsUrl = `${this.baseUrl}/laws/main/n`;
      
      logger.info('üîç Getting documents list from API', { 
        url: documentsUrl,
        searchQuery,
        token: token ? 'present' : 'none'
      });

      const response = await axios.get(documentsUrl, {
        headers: {
          'User-Agent': token || this.userAgent,
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language': 'uk-UA,uk;q=0.9,en;q=0.8'
        },
        timeout: 15000
      });

      logger.info('üìÑ Documents list response received', { 
        status: response.status,
        contentType: response.headers['content-type'],
        dataLength: response.data.length,
        lastModified: response.headers['last-modified']
      });

      // –ü–∞—Ä—Å–∏–º–æ HTML –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
      const documents = await this.parseDocumentsFromHtml(response.data, 200); // –ë–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      
      logger.info('üìã Documents parsed from HTML', { 
        found: documents.length,
        searchQuery 
      });
      
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
      const filtered = this.filterDocumentsByKeywords(documents, searchQuery, limit);
      
      logger.info('‚úÖ Filtered documents', { 
        original: documents.length,
        filtered: filtered.length 
      });
      
      return filtered;

    } catch (error) {
      logger.warn('Failed to get documents list:', error.message);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ HTML –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é API
   */
  async parseDocumentsFromHtml(html, limit) {
    try {
      const cheerio = await import('cheerio');
      const $ = cheerio.load(html);
      const documents = [];

      logger.info('üîç Parsing HTML for law documents', { 
        htmlLength: html.length,
        limit 
      });

      // –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–∫–æ–Ω–∏ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é API
      const selectors = [
        'a[href*="/laws/show/"]',  // –û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
        'a[href*="/laws/card/"]',  // –ö–∞—Ä—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        'a[href*="/go/"]',  // –°–∫–æ—Ä–æ—á–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        'a[href*="/laws/meta/"]',  // –ú–µ—Ç–∞-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
        'tr a[href*="/laws/"]',  // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—è—Ö
        'li a[href*="/laws/"]',  // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–∫–∞—Ö
        'td a[href*="/laws/"]',  // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–æ–º—ñ—Ä–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—å
        'a[href*="nreg"]'  // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –∑ nreg
      ];

      selectors.forEach(selector => {
        const elements = $(selector);
        logger.info(`üîç Checking selector: ${selector}`, { found: elements.length });
        
        elements.each((index, element) => {
          if (documents.length >= 100) return false; // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ–º—ñ—Ç

          const $element = $(element);
          const href = $element.attr('href');
          const title = $element.text().trim();

          if (href && title && title.length > 10) {
            logger.info(`üìÑ Found link: ${href} - ${title.substring(0, 50)}...`);
            
            // –í–∏—Ç—è–≥—É—î–º–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ URL –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
            let id = null;
            let fullUrl = href.startsWith('http') ? href : `${this.baseUrl}${href}`;
            
            if (href.includes('/laws/show/')) {
              // –§–æ—Ä–º–∞—Ç /laws/show/n0388500-25 -> n0388500-25
              id = href.match(/\/laws\/show\/([^\/\?]+)/)?.[1];
            } else if (href.includes('/laws/card/')) {
              // –§–æ—Ä–º–∞—Ç /laws/card/n0388500-25 -> n0388500-25
              id = href.match(/\/laws\/card\/([^\/\?]+)/)?.[1];
              // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è laws/show
              if (id) {
                fullUrl = `${this.baseUrl}/laws/show/${id}`;
                logger.info(`‚úÖ Converted /laws/card/ to laws/show: ${id}`);
              }
            } else if (href.includes('/go/')) {
              // –§–æ—Ä–º–∞—Ç /go/n0388500-25 -> n0388500-25
              id = href.match(/\/go\/([^\/\?]+)/)?.[1];
              // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è laws/show
              if (id) {
                fullUrl = `${this.baseUrl}/laws/show/${id}`;
                logger.info(`‚úÖ Converted /go/ to laws/show: ${id}`);
              }
            } else if (href.includes('/laws/meta/')) {
              // –§–æ—Ä–º–∞—Ç /laws/meta/n0388500-25 -> n0388500-25
              id = href.match(/\/laws\/meta\/([^\/\?]+)/)?.[1];
              // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è laws/show
              if (id) {
                fullUrl = `${this.baseUrl}/laws/show/${id}`;
                logger.info(`‚úÖ Converted /laws/meta/ to laws/show: ${id}`);
              }
            } else if (href.includes('nreg')) {
              // –®—É–∫–∞—î–º–æ nreg –≤ URL
              const nregMatch = href.match(/([0-9nprvz][0-9\/\_\-a-z–∞-—è—ó—ñ—ë—î“ë]{3,11})/);
              if (nregMatch) {
                id = nregMatch[1];
                fullUrl = `${this.baseUrl}/laws/show/${id}`;
                logger.info(`‚úÖ Found nreg in URL: ${id}`);
              }
            }

            if (id) {
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –¥—É–±–ª—ñ–∫–∞—Ç
              const exists = documents.some(doc => doc.id === id);
              if (!exists) {
                documents.push({
                  id: id,
                  title: title,
                  url: fullUrl
                });
                logger.info(`‚úÖ Added document: ${id} - ${title.substring(0, 30)}...`);
              } else {
                logger.info(`‚ö†Ô∏è Duplicate document skipped: ${id}`);
              }
            } else {
              logger.info(`‚ùå No ID extracted from: ${href}`);
            }
          } else {
            if (href) {
              logger.info(`‚ö†Ô∏è Link too short or no title: ${href} - "${title}"`);
            }
          }
        });
      });

      logger.info('üìã Documents found in HTML', { 
        total: documents.length,
        unique: [...new Set(documents.map(d => d.id))].length
      });

      return documents;

    } catch (error) {
      logger.warn('Failed to parse documents from HTML:', error.message);
      return [];
    }
  }

  /**
   * –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
   */
  filterDocumentsByKeywords(documents, searchQuery, limit) {
    const keywords = searchQuery.toLowerCase().split(' ');
    
    logger.info('üîç Filtering documents by keywords', { 
      totalDocuments: documents.length,
      keywords: keywords,
      limit 
    });
    
    const filtered = documents.filter(doc => {
      const title = doc.title.toLowerCase();
      const hasMatch = keywords.some(keyword => title.includes(keyword));
      
      if (hasMatch) {
        logger.info(`‚úÖ Document matches keywords: ${doc.title.substring(0, 50)}...`);
      }
      
      return hasMatch;
    });

    logger.info('üìä Filtering results', { 
      original: documents.length,
      filtered: filtered.length,
      keywords 
    });

    return filtered.slice(0, limit);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏
   */
  async getDocumentsDetails(documents, token) {
    const laws = [];

    for (const doc of documents) {
      try {
        await this.respectRateLimit();
        
        const law = await this.getDocumentDetails(doc, token);
        if (law) {
          laws.push(law);
        }
      } catch (error) {
        logger.warn('Failed to get document details:', { 
          id: doc.id, 
          error: error.message 
        });
      }
    }

    return laws;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –æ–∫—Ä–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é API
   */
  async getDocumentDetails(doc, token) {
    try {
      await this.respectRateLimit();

      logger.info('üìÑ Getting document details', { 
        id: doc.id,
        url: doc.url,
        token: token ? 'present' : 'none'
      });

      // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ JSON –≤–µ—Ä—Å—ñ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
      let response;
      let contentType = 'unknown';
      
      if (token) {
        try {
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TXT —Ñ–æ—Ä–º–∞—Ç —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π (–º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç)
          const txtUrl = `${this.baseUrl}/laws/show/${doc.id}.txt`;
          response = await axios.get(txtUrl, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'User-Agent': this.userAgent,
              'Accept': 'text/plain'
            },
            timeout: 15000
          });
          contentType = 'txt';
          logger.info('‚úÖ TXT format successful', { id: doc.id });
        } catch (txtError) {
          logger.warn('TXT format failed, trying JSON', { 
            id: doc.id,
            error: txtError.message,
            status: txtError.response?.status 
          });
          // –Ø–∫—â–æ TXT –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSON –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
          const jsonUrl = `${this.baseUrl}/laws/show/${doc.id}.json`;
          response = await axios.get(jsonUrl, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'User-Agent': this.userAgent,
              'Accept': 'application/json'
            },
            timeout: 15000
          });
          contentType = 'json';
          logger.info('‚úÖ JSON format successful (fallback)', { id: doc.id });
        }
      } else {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TXT —Ñ–æ—Ä–º–∞—Ç
        const txtUrl = `${this.baseUrl}/laws/show/${doc.id}.txt`;
        response = await axios.get(txtUrl, {
          headers: {
            'User-Agent': this.userAgent,
            'Accept': 'text/plain'
          },
          timeout: 15000
        });
        contentType = 'txt';
        logger.info('‚úÖ TXT format successful (no token)', { id: doc.id });
      }

      logger.info('üìÑ Document details received', { 
        id: doc.id,
        contentType,
        status: response.status,
        dataLength: response.data?.length || 0
      });

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      let content, lawNumber, documentType, date;

      if (contentType === 'json') {
        // JSON —Ñ–æ—Ä–º–∞—Ç - –≤–∏—Ç—è–≥—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        const data = response.data;
        
        // JSON –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ –º–µ—Ç–∞–¥–∞–Ω—ñ, –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π
        content = data.nazva || ''; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É —è–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
        
        // –í–∏—Ç—è–≥—É—î–º–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        lawNumber = data.nreg || doc.id;
        documentType = this.detectDocumentTypeFromJson(data);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É –∑ —Ñ–æ—Ä–º–∞—Ç—É 20250925 –≤ ISO
        if (data.datred) {
          const dateStr = data.datred.toString();
          if (dateStr.length === 8) {
            const year = dateStr.substring(0, 4);
            const month = dateStr.substring(4, 6);
            const day = dateStr.substring(6, 8);
            date = `${year}-${month}-${day}`;
          } else {
            date = new Date().toISOString().split('T')[0];
          }
        } else {
          date = new Date().toISOString().split('T')[0];
        }
        
        logger.info('üìÑ JSON content extracted', { 
          id: doc.id,
          contentLength: content.length,
          lawNumber,
          documentType
        });
      } else {
        // TXT —Ñ–æ—Ä–º–∞—Ç
        content = response.data;
        lawNumber = this.extractLawNumberFromText(content, doc.id);
        documentType = this.detectDocumentTypeFromText(content);
        date = this.extractDateFromText(content);
        
        logger.info('üìÑ TXT content extracted', { 
          id: doc.id,
          contentLength: content.length,
          lawNumber,
          documentType
        });
      }

      if (!content || content.length < 100) {
        logger.warn('Document content too short or empty', { 
          id: doc.id,
          contentLength: content?.length || 0
        });
        return null;
      }

      const result = {
        title: doc.title,
        content: content, // –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å
        law_number: lawNumber,
        document_type: documentType,
        source_url: doc.url || `https://data.rada.gov.ua/laws/show/${doc.id}`,
        keywords: this.extractKeywords(doc.title, content),
        category: this.determineCategory(doc.title, lawNumber),
        date_created: date,
        snippet: content.substring(0, 200) + '...'
      };

      logger.info('‚úÖ Document details processed', { 
        id: doc.id,
        title: doc.title,
        contentLength: result.content.length,
        documentType: result.document_type
      });

      return result;

    } catch (error) {
      logger.warn('Failed to parse document:', { 
        id: doc.id,
        url: doc.url, 
        error: error.message 
      });
      return null;
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ JSON
   */
  detectDocumentTypeFromJson(data) {
    const title = (data.nazva || '').toLowerCase();
    const nreg = (data.nreg || '').toLowerCase();

    if (title.includes('–∑–∞–∫–æ–Ω') || nreg.includes('–∑–∞–∫–æ–Ω')) {
      return '–ó–∞–∫–æ–Ω –£–∫—Ä–∞—ó–Ω–∏';
    } else if (title.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞') || nreg.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞') || nreg.includes('-–ø')) {
      return '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞';
    } else if (title.includes('–∫–æ–¥–µ–∫—Å') || nreg.includes('–∫–æ–¥–µ–∫—Å')) {
      return '–ö–æ–¥–µ–∫—Å';
    } else if (title.includes('—É–∫–∞–∑') || nreg.includes('—É–∫–∞–∑')) {
      return '–£–∫–∞–∑';
    } else if (title.includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è') || nreg.includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è') || nreg.includes('-—Ä')) {
      return '–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è';
    } else {
      return '–ù–ü–ê';
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  determineCategory(title, lawNumber) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('—Ü–∏–≤—ñ–ª—å–Ω–∏–π') || titleLower.includes('—Ü–∏–≤—ñ–ª—å–Ω–æ')) {
      return '–¶–∏–≤—ñ–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('—Ç—Ä—É–¥–æ–≤–∏–π') || titleLower.includes('—Ç—Ä—É–¥–æ–≤–µ')) {
      return '–¢—Ä—É–¥–æ–≤–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π') || titleLower.includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ')) {
      return '–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–ø–æ–¥–∞—Ç–∫–æ–≤–∏–π') || titleLower.includes('–ø–æ–¥–∞—Ç–∫–æ–≤–µ')) {
      return '–ü–æ–¥–∞—Ç–∫–æ–≤–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–∑–µ–º–µ–ª—å–Ω–∏–π') || titleLower.includes('–∑–µ–º–µ–ª—å–Ω–µ')) {
      return '–ó–µ–º–µ–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('—Å—ñ–º–µ–π–Ω–∏–π') || titleLower.includes('—Å—ñ–º–µ–π–Ω–µ')) {
      return '–°—ñ–º–µ–π–Ω–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏–π') || titleLower.includes('–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–µ')) {
      return '–ì–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π') || titleLower.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ')) {
      return '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –ø—Ä–∞–≤–æ';
    } else if (titleLower.includes('–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏–π') || titleLower.includes('–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ')) {
      return '–ü—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
    }
    
    return '–Ü–Ω—à–µ';
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É
   */
  detectDocumentTypeFromText(content) {
    const text = content.toLowerCase();

    if (text.includes('–∑–∞–∫–æ–Ω —É–∫—Ä–∞—ó–Ω–∏')) {
      return '–ó–∞–∫–æ–Ω –£–∫—Ä–∞—ó–Ω–∏';
    } else if (text.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞') || text.includes('—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è')) {
      return '–ü–æ—Å—Ç–∞–Ω–æ–≤–∞';
    } else if (text.includes('–∫–æ–¥–µ–∫—Å')) {
      return '–ö–æ–¥–µ–∫—Å';
    } else if (text.includes('—É–∫–∞–∑')) {
      return '–£–∫–∞–∑';
    } else {
      return '–ù–ü–ê';
    }
  }

  /**
   * –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä –∑–∞–∫–æ–Ω—É –∑ —Ç–µ–∫—Å—Ç—É
   */
  extractLawNumberFromText(content, fallbackId) {
    const lawMatch = content.match(/(?:–ó–∞–∫–æ–Ω|–ü–æ—Å—Ç–∞–Ω–æ–≤–∞|–ö–æ–¥–µ–∫—Å)\s+(?:–£–∫—Ä–∞—ó–Ω–∏\s+)?‚Ññ?\s*(\d+[-\w]*)/i);
    if (lawMatch) {
      return lawMatch[1];
    }
    return fallbackId;
  }

  /**
   * –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç—É –∑ —Ç–µ–∫—Å—Ç—É
   */
  extractDateFromText(content) {
    const dateMatch = content.match(/(\d{1,2}\.\d{1,2}\.\d{4})/);
    if (dateMatch) {
      const dateStr = dateMatch[1];
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ dd.mm.yyyy –≤ yyyy-mm-dd
      const parts = dateStr.split('.');
      if (parts.length === 3) {
        const day = parts[0].padStart(2, '0');
        const month = parts[1].padStart(2, '0');
        const year = parts[2];
        return `${year}-${month}-${day}`;
      }
    }
    return new Date().toISOString().split('T')[0];
  }

  /**
   * –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
   */
  extractKeywords(title, content) {
    const text = `${title} ${content}`.toLowerCase();
    const keywords = [];

    const legalTerms = [
      '–¥–æ–≥–æ–≤—ñ—Ä', '–ø—Ä–∞–≤–æ', '–æ–±–æ–≤\'—è–∑–æ–∫', '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å', '–ø–æ—Ä—É—à–µ–Ω–Ω—è',
      '—à—Ç—Ä–∞—Ñ', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '—Å—É–¥', '–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞', '–ø–æ–ª—ñ—Ü—ñ—è',
      '–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫', '—Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å', '–∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞', '–≤—ñ–¥–ø—É—Å—Ç–∫–∞',
      '–Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å', '–∫—É–ø—ñ–≤–ª—è', '–ø—Ä–æ–¥–∞–∂', '–æ—Ä–µ–Ω–¥–∞', '—Å–ø–∞–¥–æ–∫',
      '—à–ª—é–±', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '–∞–ª—ñ–º–µ–Ω—Ç–∏', '–æ–ø—ñ–∫–∞', '–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è'
    ];

    legalTerms.forEach(term => {
      if (text.includes(term)) {
        keywords.push(term);
      }
    });

    return keywords.slice(0, 10);
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–∫–æ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
   */
  async saveLawsToDatabase(laws) {
    if (laws.length === 0) return;

    try {
      for (const law of laws) {
        await query('legal_laws', 'upsert', {
          data: {
            title: law.title,
            content: law.content,
            source_url: law.source_url,
            law_number: law.law_number,
            keywords: law.keywords || [],
            articles: law.articles || [],
            category: law.category || '–Ü–Ω—à–µ',
            date_created: law.date_created || new Date().toISOString().split('T')[0]
          },
          onConflict: 'source_url'
        });
      }

      logger.info('‚úÖ Laws saved to database via official API', { count: laws.length });
    } catch (error) {
      logger.error('Failed to save laws to database:', error);
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –∑–Ω–∞–Ω—å
   */
  async updateDatabase() {
    try {
      logger.info('üîÑ Updating legal knowledge base via official Rada API...');

      const searchQueries = [
        ['—Ü–∏–≤—ñ–ª—å–Ω–µ –ø—Ä–∞–≤–æ', '–¥–æ–≥–æ–≤—ñ—Ä', '–∑–æ–±–æ–≤\'—è–∑–∞–Ω–Ω—è'],
        ['—Ç—Ä—É–¥–æ–≤–µ –ø—Ä–∞–≤–æ', '–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫', '—Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å'],
        ['—Å—ñ–º–µ–π–Ω–µ –ø—Ä–∞–≤–æ', '—à–ª—é–±', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '–∞–ª—ñ–º–µ–Ω—Ç–∏'],
        ['–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–∞–≤–æ', '–∑–ª–æ—á–∏–Ω', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è'],
        ['–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –ø—Ä–∞–≤–æ', '–ø–æ—Ä—É—à–µ–Ω–Ω—è', '—à—Ç—Ä–∞—Ñ'],
        ['–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–µ –ø—Ä–∞–≤–æ', '–ø—Ä–∞–≤–∞ –ª—é–¥–∏–Ω–∏', '–≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω'],
        ['–ø–æ–¥–∞—Ç–∫–æ–≤–µ –ø—Ä–∞–≤–æ', '–ø–æ–¥–∞—Ç–æ–∫', '–∑–±—ñ—Ä'],
        ['–∑–µ–º–µ–ª—å–Ω–µ –ø—Ä–∞–≤–æ', '–∑–µ–º–ª—è', '–Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å']
      ];

      let totalLaws = 0;

      for (const query of searchQueries) {
        try {
          const laws = await this.searchLaws(query, 2);
          if (laws.length > 0) {
            await this.saveLawsToDatabase(laws);
            totalLaws += laws.length;
          }
          
          // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (5-7 —Å–µ–∫—É–Ω–¥ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
          await new Promise(resolve => setTimeout(resolve, 6000));
        } catch (error) {
          logger.warn('Failed to process search query:', { query, error: error.message });
        }
      }

      logger.info('‚úÖ Knowledge base update completed via official API', { totalLaws });
      return totalLaws;

    } catch (error) {
      logger.error('Failed to update knowledge base:', error);
      throw error;
    }
  }
}

const radaOfficialApiParserInstance = new RadaOfficialApiParser();

module.exports = radaOfficialApiParserInstance;
