require('dotenv').config();
const fs = require('fs');
const radaOfficialApiParser = require('./src/services/radaOfficialApiParser');
const { query } = require('./src/config/supabase');
const logger = require('./src/utils/logger');

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node add_laws_to_database.cjs "–ó–£ –ø—Ä–æ –ó–∞—Ö–∏—Å—Ç –ü—Ä–∞–≤ –°–ø–æ–∂–∏–≤–∞—á—ñ–≤" "–ó–£ –ø—Ä–æ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –†–æ–∑—à—É–∫–æ–≤—É –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å"
 */

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–∫–æ–Ω—É –≤ —Ñ–∞–π–ª–∞—Ö doc.txt —Ç–∞ ist.txt
async function findLawInDocFile(lawName) {
  try {
    const { execSync } = require('child_process');
    const path = require('path');
    
          const docPath = path.join(__dirname, '../docs/api-data/doc.txt');
          const istPath = path.join(__dirname, '../docs/api-data/ist.txt');
    
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ doc.txt
    // –Ø–∫—â–æ —Ü–µ –Ω–æ–º–µ—Ä –∑–∞–∫–æ–Ω—É (—Ñ–æ—Ä–º–∞—Ç XXXX-XX), —à—É–∫–∞—î–º–æ –≤ –¥—Ä—É–≥—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
    const isLawNumber = /^\d+-\d+$/.test(lawName);
    const docSearchCommand = isLawNumber 
      ? `iconv -f cp1251 -t utf-8 "${docPath}" | awk -F'\t' '$2 == "${lawName}"' | head -5`
      : `iconv -f cp1251 -t utf-8 "${docPath}" | grep -i "${lawName}" | head -5`;
    let result = '';
    
    try {
      result = execSync(docSearchCommand, { encoding: 'utf8' });
    } catch (error) {
      logger.warn(`–ü–æ—à—É–∫ –≤ doc.txt –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è "${lawName}"`);
    }
    
    // ist.txt –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ ID —Ç–∞ –ø–æ–¥—ñ—ó, –±–µ–∑ –Ω–∞–∑–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    // –¢–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    
    if (result && result.trim()) {
      const lines = result.trim().split('\n');
      const laws = [];
      
      for (const line of lines) {
        const parts = line.split('\t');
        if (parts.length >= 3) {
          laws.push({
            id: parts[0],
            number: parts[1],
            title: parts[2],
            fullLine: line,
            source: fs.existsSync(istPath) && result.includes('ist.txt') ? 'ist.txt' : 'doc.txt'
          });
        }
      }
      
      return laws;
    }
    
    return [];
  } catch (error) {
    logger.error(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∑–∞–∫–æ–Ω—É "${lawName}":`, error);
    return [];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ ist.txt
async function getAdditionalInfoFromIst(docId) {
  try {
    const { execSync } = require('child_process');
    const path = require('path');
    
          const istPath = path.join(__dirname, '../docs/api-data/ist.txt');
    
    if (!fs.existsSync(istPath)) {
      return null;
    }
    
    const searchCommand = `iconv -f cp1251 -t utf-8 "${istPath}" | grep "^${docId}\\t" | head -1`;
    const result = execSync(searchCommand, { encoding: 'utf8' });
    
    if (result.trim()) {
      const parts = result.trim().split('\t');
      return {
        events: parts[1] || '',
        classification: parts[2] || '',
        publications: parts[3] || '',
        relations: parts[4] || ''
      };
    }
    
    return null;
  } catch (error) {
    logger.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è ID ${docId}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∫–æ–Ω—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async function addLawToDatabase(lawName) {
  try {
    logger.info(`üîç –®—É–∫–∞—î–º–æ –∑–∞–∫–æ–Ω: "${lawName}"`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î
    const existingLaw = await query('legal_laws', 'select', {
      select: 'id, title',
      eq: { column: 'title', value: lawName }
    });
    
    if (existingLaw.rows && existingLaw.rows.length > 0) {
      logger.info(`‚è≠Ô∏è  –ó–∞–∫–æ–Ω "${lawName}" –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
      return { success: true, skipped: true, message: '–ó–∞–∫–æ–Ω –≤–∂–µ —ñ—Å–Ω—É—î' };
    }
    
    // –®—É–∫–∞—î–º–æ –≤ doc.txt
    const foundLaws = await findLawInDocFile(lawName);
    
    if (foundLaws.length === 0) {
      logger.warn(`‚ùå –ó–∞–∫–æ–Ω "${lawName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ doc.txt`);
      return { success: false, message: '–ó–∞–∫–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
    }
    
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–∫–æ–Ω–∏ –ø—Ä–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è —Å—É–¥—ñ–≤
    const filteredLaws = foundLaws.filter(law => {
      const title = law.title.toLowerCase();
      return !title.includes('–≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω') && 
             !title.includes('–∑–º—ñ–Ω–∏ –¥–æ') && 
             !title.includes('–∑–º—ñ–Ω–∏ –≤') &&
             !title.includes('–∑–º—ñ–Ω–∏ —Ç–∞ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è') &&
             !title.includes('–∑–º—ñ–Ω–∏ —Ç–∞ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–æ') &&
             !title.includes('—Ä—ñ—à–µ–Ω–Ω—è') &&
             !title.includes('—É—Ö–≤–∞–ª–∞') &&
             !title.includes('–ø–æ—Å—Ç–∞–Ω–æ–≤–∞') &&
             !title.includes('–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–∏–π —Å—É–¥') &&
             !title.includes('–≤–µ—Ä—Ö–æ–≤–Ω–∏–π —Å—É–¥') &&
             !title.includes('—Å–µ–Ω–∞—Ç');
    });
    
    if (filteredLaws.length === 0) {
      logger.warn(`‚ùå –í—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞–∫–æ–Ω–∏ —î –∑–∞–∫–æ–Ω–∞–º–∏ –ø—Ä–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω –∞–±–æ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ —Å—É–¥—ñ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "${lawName}"`);
      return { success: false, message: '–¢—ñ–ª—å–∫–∏ –∑–∞–∫–æ–Ω–∏ –ø—Ä–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω –∞–±–æ —Ä—ñ—à–µ–Ω–Ω—è —Å—É–¥—ñ–≤' };
    }
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä—ñ—à–µ–Ω—å —Å—É–¥—ñ–≤)
    const bestLaw = filteredLaws.reduce((best, current) => {
      // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–∫–æ–Ω–∏ —Ç–∞ –∫–æ–¥–µ–∫—Å–∏
      if (current.title.includes('–ó–∞–∫–æ–Ω –£–∫—Ä–∞—ó–Ω–∏') && !current.title.includes('—Ä—ñ—à–µ–Ω–Ω—è') && !current.title.includes('—É—Ö–≤–∞–ª–∞')) {
        return current;
      }
      if (best.title.includes('—Ä—ñ—à–µ–Ω–Ω—è') || best.title.includes('—É—Ö–≤–∞–ª–∞')) {
        return current;
      }
      return current.title.length < best.title.length ? current : best;
    });
    
    logger.info(`üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ: "${bestLaw.title}" (ID: ${bestLaw.id}, –ù–æ–º–µ—Ä: ${bestLaw.number})`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ ist.txt
    const additionalInfo = await getAdditionalInfoFromIst(bestLaw.id);
    if (additionalInfo) {
      logger.info(`üìã –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: –ø–æ–¥—ñ—ó=${additionalInfo.events ? '—Ç–∞–∫' : '–Ω—ñ'}, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó=${additionalInfo.publications ? '—Ç–∞–∫' : '–Ω—ñ'}`);
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
    const token = await radaOfficialApiParser.getToken();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    let docDetails = null;
    try {
      docDetails = await radaOfficialApiParser.getDocumentDetails(
        { id: bestLaw.id, title: bestLaw.title }, 
        token
      );
    } catch (apiError) {
      logger.warn(`‚ö†Ô∏è API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è "${bestLaw.title}": ${apiError.message}`);
      docDetails = null;
    }
    
    if (docDetails && docDetails.content && docDetails.content.length > 1000) {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
      await radaOfficialApiParser.saveLawsToDatabase([docDetails]);
      
      logger.info(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: "${bestLaw.title}"`);
      return { success: true, message: '–ó–∞–∫–æ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ', law: bestLaw };
    } else {
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∑–∞–ø–∏—Å
      logger.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API –¥–ª—è: "${bestLaw.title}"`);
      logger.info(`üìù –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∑–∞–ø–∏—Å –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏...`);
      
      const basicLawData = {
        title: bestLaw.title,
        content: `–ó–∞–∫–æ–Ω "${bestLaw.title}" (–Ω–æ–º–µ—Ä ${bestLaw.number}). –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ Rada API.`,
        source_url: `https://data.rada.gov.ua/laws/show/${bestLaw.id}`,
        law_number: bestLaw.number,
        keywords: extractKeywords(bestLaw.title, ''),
        articles: [],
        category: determineCategory(bestLaw.title, bestLaw.number),
        date_created: new Date().toISOString().split('T')[0]
      };
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤—É –∑–∞–ø–∏—Å
      await radaOfficialApiParser.saveLawsToDatabase([basicLawData]);
      
      logger.info(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤—É –∑–∞–ø–∏—Å –¥–ª—è: "${bestLaw.title}"`);
      return { success: true, message: '–°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤—É –∑–∞–ø–∏—Å (–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)', law: bestLaw };
    }
    
  } catch (error) {
    logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ "${lawName}":`, error.message);
    return { success: false, message: error.message };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ —Å—Ç–∞—Ç—Ç—è–º–∏
async function enrichLawsWithArticles() {
  try {
    logger.info('üöÄ –ó–±–∞–≥–∞—á—É—î–º–æ –∑–∞–∫–æ–Ω–∏ —Å—Ç–∞—Ç—Ç—è–º–∏ —Ç–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏...');
    
    const laws = await query('legal_laws', 'select', { 
      select: 'id, title, content, law_number' 
    });
    
    if (!laws.rows || laws.rows.length === 0) {
      logger.info('üìã –ù–µ–º–∞—î –∑–∞–∫–æ–Ω—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
      return;
    }
    
    logger.info(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ ${laws.rows.length} –∑–∞–∫–æ–Ω—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);
    
    for (const law of laws.rows) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–∫–æ–Ω–∏ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∞–±–æ –∑ –±–∞–∑–æ–≤–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        if (!law.content || law.content.includes('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ Rada API') || law.content.length < 100) {
          logger.info(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "${law.title}" - –Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏`);
          continue;
        }
        
        logger.info(`üìÑ –û–±—Ä–æ–±–ª—è—î–º–æ: ${law.title}`);
        
        // –ü–∞—Ä—Å–∏–º–æ —Å—Ç–∞—Ç—Ç—ñ –∑ —Ç–µ–∫—Å—Ç—É
        const articles = parseArticlesFromText(law.content, law.law_number);
        
        // –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        const keywords = extractKeywords(law.title, law.content);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        const category = determineCategory(law.title, law.law_number);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        await query('legal_laws', 'update', {
          data: {
            articles: articles,
            keywords: keywords,
            category: category,
            updated_at: new Date().toISOString()
          },
          eq: { column: 'id', value: law.id }
        });
        
        logger.info(`‚úÖ –ó–±–∞–≥–∞—á–µ–Ω–æ: ${law.title} (${articles.length} —Å—Ç–∞—Ç–µ–π, ${keywords.length} –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤)`);
        
      } catch (error) {
        logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ "${law.title}":`, error.message);
      }
    }
    
    logger.info('‚úÖ –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–∞–≥–∞—á–µ–Ω–Ω—ñ:', error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å—Ç–∞—Ç–µ–π
function parseArticlesFromText(content, lawNumber) {
  const articles = [];
  
  // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è —Å—Ç–∞—Ç—Ç–µ–π
  const articlePattern = /–°—Ç–∞—Ç—Ç—è\s+(\d+[–∞-—è]?)\s*\.?\s*([^]*?)(?=–°—Ç–∞—Ç—Ç—è\s+\d+[–∞-—è]?|$)/gi;
  
  let match;
  while ((match = articlePattern.exec(content)) !== null) {
    const articleNumber = match[1];
    const articleText = match[2].trim();
    
    if (articleText.length > 100) { // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–∞—Ç—Ç—ñ
      articles.push({
        number: articleNumber,
        title: extractArticleTitle(articleText),
        content: articleText.substring(0, 3000), // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
        law_number: lawNumber
      });
    }
  }
  
  return articles;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—Ç—ñ
function extractArticleTitle(text) {
  const lines = text.split('\n');
  for (const line of lines) {
    const trimmed = line.trim();
    if (trimmed.length > 10 && trimmed.length < 200) {
      return trimmed;
    }
  }
  return text.substring(0, 100) + '...';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
function extractKeywords(title, content) {
  const keywords = new Set();
  const text = `${title} ${content}`.toLowerCase();
  
  // –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–∞ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫—Ä—ñ–º —Å–ª—É–∂–±–æ–≤–∏—Ö)
  const titleWords = title.toLowerCase()
    .replace(/[^\u0400-\u04FF\s]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 3 && !['–ø—Ä–æ', '—É–∫—Ä–∞—ó–Ω–∏', '–∫–æ–¥–µ–∫—Å', '–∑–∞–∫–æ–Ω', '–¥–µ—è–∫—ñ', '–ø–∏—Ç–∞–Ω–Ω—è'].includes(word));
  
  titleWords.forEach(word => keywords.add(word));
  
  // –†–æ–∑—à–∏—Ä–µ–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
  const legalTerms = [
    // –û—Å–Ω–æ–≤–Ω—ñ —é—Ä–∏–¥–∏—á–Ω—ñ –ø–æ–Ω—è—Ç—Ç—è
    '–ø—Ä–∞–≤–æ', '–∑–∞–∫–æ–Ω', '—Å—Ç–∞—Ç—Ç—è', '–ø—É–Ω–∫—Ç', '—á–∞—Å—Ç–∏–Ω–∞', '—Ä–æ–∑–¥—ñ–ª', '–≥–ª–∞–≤–∞',
    '–¥–æ–≥–æ–≤—ñ—Ä', '—É–≥–æ–¥–∞', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
    
    // –ü—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    '–ø–æ—Ä—É—à–µ–Ω–Ω—è', '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å', '—à—Ç—Ä–∞—Ñ', '–ø–æ–∫–∞—Ä–∞–Ω–Ω—è', '—Å–∞–Ω–∫—Ü—ñ—è',
    '—Å—É–¥', '—Å—É–¥–¥—è', '—Å—É–¥–æ—á–∏–Ω—Å—Ç–≤–æ', '–ø—Ä–æ–∫—É—Ä–æ—Ä', '–∞–¥–≤–æ–∫–∞—Ç', '–Ω–æ—Ç–∞—Ä—ñ—É—Å',
    '—Å–ª—ñ–¥—á–∏–π', '–µ–∫—Å–ø–µ—Ä—Ç', '—Å–≤—ñ–¥–æ–∫', '–ø–æ–∑–∏–≤–∞—á', '–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á',
    
    // –î–µ—Ä–∂–∞–≤–Ω—ñ –æ—Ä–≥–∞–Ω–∏
    '–¥–µ—Ä–∂–∞–≤–∞', '—É—Ä—è–¥', '–º—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ', '–≤—ñ–¥–æ–º—Å—Ç–≤–æ', '–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
    '–∫–æ–º—ñ—Ç–µ—Ç', '–∫–æ–º—ñ—Å—ñ—è', '—Å–ª—É–∂–±–∞', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è',
    
    // –°—É–±'—î–∫—Ç–∏ –ø—Ä–∞–≤–∞
    '–≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω', '–æ—Å–æ–±–∞', '–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è', '–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ', '–∫–æ–º–ø–∞–Ω—ñ—è',
    '—Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–æ', '–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤', '—Ñ–æ–Ω–¥', '–æ–±—î–¥–Ω–∞–Ω–Ω—è', '—Å–ø—ñ–ª–∫–∞',
    
    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    '–º–∞–π–Ω–æ', '–≤–ª–∞—Å–Ω—ñ—Å—Ç—å', '—Å–ø–∞–¥—â–∏–Ω–∞', '—Å–ø–∞–¥–æ–∫', '—Å–ø–∞–¥–∫–æ—î–º–µ—Ü—å',
    '—à–ª—é–±', '—Ä–æ–∑–ª—É—á–µ–Ω–Ω—è', '–¥—ñ—Ç–∏', '–æ–ø—ñ–∫–∞', '–ø—ñ–∫–ª—É–≤–∞–Ω–Ω—è',
    '–ø—Ä–∞—Ü—è', '–∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å', '–∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞', '–≤—ñ–¥–ø—É—Å—Ç–∫–∞',
    '–ø–æ–¥–∞—Ç–æ–∫', '–∑–±—ñ—Ä', '–º–∏—Ç–æ', '–∞–∫—Ü–∏–∑', '–ø–¥–≤',
    '–∑–µ–º–ª—è', '–¥—ñ–ª—è–Ω–∫–∞', '–±—É–¥—ñ–≤–ª—è', '–∂–∏—Ç–ª–æ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞',
    '–∞–≤—Ç–æ–º–æ–±—ñ–ª—å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–¥–æ—Ä–æ–∂–Ω—ñ–π —Ä—É—Ö', '–¥—Ç–ø',
    '–º–µ–¥–∏—Ü–∏–Ω–∞', '–ª—ñ–∫—É–≤–∞–Ω–Ω—è', '–ª—ñ–∫–∞—Ä', '–ø–∞—Ü—ñ—î–Ω—Ç', '–ª—ñ–∫–∞—Ä–Ω—è',
    '–æ—Å–≤—ñ—Ç–∞', '—à–∫–æ–ª–∞', '—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', '—Å—Ç—É–¥–µ–Ω—Ç', '—É—á–µ–Ω—å',
    '–ø–µ–Ω—Å—ñ—è', '—Å–æ—Ü—ñ–∞–ª—å–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è', '—ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å',
    '–≤—ñ–π—Å—å–∫–æ–≤–∞ —Å–ª—É–∂–±–∞', '–º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—è', '–ø—Ä–∏–∑–æ–≤', '—Ä–µ–∑–µ—Ä–≤—ñ—Å—Ç'
  ];
  
  // –î–æ–¥–∞—î–º–æ —Ç–µ—Ä–º—ñ–Ω–∏ –∑ —Ç–µ–∫—Å—Ç—É
  legalTerms.forEach(term => {
    if (text.includes(term)) {
      keywords.add(term);
    }
  });
  
  // –î–æ–¥–∞—î–º–æ –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ —Å–ª–æ–≤–∞ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
  if (content && content.length > 100) {
    const contentWords = content.toLowerCase()
      .replace(/[^\u0400-\u04FF\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 4 && !['—Å—Ç–∞—Ç—Ç—è', '–ø—É–Ω–∫—Ç', '—á–∞—Å—Ç–∏–Ω–∞', '—Ä–æ–∑–¥—ñ–ª'].includes(word));
    
    const wordCount = {};
    contentWords.forEach(word => {
      wordCount[word] = (wordCount[word] || 0) + 1;
    });
    
    const frequentWords = Object.entries(wordCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([word]) => word);
    
    frequentWords.forEach(word => keywords.add(word));
  }
  
  return Array.from(keywords).slice(0, 30); // –ú–∞–∫—Å–∏–º—É–º 30 –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function determineCategory(title, lawNumber) {
  const titleLower = title.toLowerCase();
  
  if (titleLower.includes('—Ü–∏–≤—ñ–ª—å–Ω–∏–π') || titleLower.includes('—Ü–∏–≤—ñ–ª—å–Ω–æ')) {
    return '–¶–∏–≤—ñ–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('—Ç—Ä—É–¥–æ–≤–∏–π') || titleLower.includes('—Ç—Ä—É–¥–æ–≤–µ')) {
    return '–¢—Ä—É–¥–æ–≤–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–∏–π') || titleLower.includes('–∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ')) {
    return '–ö—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–ø–æ–¥–∞—Ç–∫–æ–≤–∏–π') || titleLower.includes('–ø–æ–¥–∞—Ç–∫–æ–≤–µ')) {
    return '–ü–æ–¥–∞—Ç–∫–æ–≤–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–∑–µ–º–µ–ª—å–Ω–∏–π') || titleLower.includes('–∑–µ–º–µ–ª—å–Ω–µ')) {
    return '–ó–µ–º–µ–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('—Å—ñ–º–µ–π–Ω–∏–π') || titleLower.includes('—Å—ñ–º–µ–π–Ω–µ')) {
    return '–°—ñ–º–µ–π–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏–π') || titleLower.includes('–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–µ')) {
    return '–ì–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π') || titleLower.includes('–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ')) {
    return '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–∏–π') || titleLower.includes('–ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ')) {
    return '–ü—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è')) {
    return '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ–π–Ω–µ –ø—Ä–∞–≤–æ';
  } else if (titleLower.includes('–∑–∞—Ö–∏—Å—Ç') && titleLower.includes('—Å–ø–æ–∂–∏–≤–∞—á')) {
    return '–ó–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤';
  } else if (titleLower.includes('–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ') && titleLower.includes('—Ä–æ–∑—à—É–∫–æ–≤')) {
    return '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ-—Ä–æ–∑—à—É–∫–æ–≤–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å';
  }
  
  return '–Ü–Ω—à–µ';
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
      console.log('üìã –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node add_laws_to_database.cjs "–ù–∞–∑–≤–∞ –∑–∞–∫–æ–Ω—É 1" "–ù–∞–∑–≤–∞ –∑–∞–∫–æ–Ω—É 2" ...');
      console.log('üìã –ü—Ä–∏–∫–ª–∞–¥: node add_laws_to_database.cjs "–ó–£ –ø—Ä–æ –ó–∞—Ö–∏—Å—Ç –ü—Ä–∞–≤ –°–ø–æ–∂–∏–≤–∞—á—ñ–≤" "–ó–£ –ø—Ä–æ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –†–æ–∑—à—É–∫–æ–≤—É –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å"');
      return;
    }
    
    logger.info('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
    logger.info('=' .repeat(60));
    
    let added = 0;
    let skipped = 0;
    let failed = 0;
    
    for (const lawName of args) {
      const result = await addLawToDatabase(lawName);
      
      if (result.success) {
        if (result.skipped) {
          skipped++;
        } else {
          added++;
        }
      } else {
        failed++;
      }
      
      // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    // –ó–±–∞–≥–∞—á—É—î–º–æ –≤—Å—ñ –∑–∞–∫–æ–Ω–∏ —Å—Ç–∞—Ç—Ç—è–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫–æ–Ω—Ç–µ–Ω—Ç)
    if (added > 0) {
      logger.info('üîÑ –ó–±–∞–≥–∞—á—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–∫–æ–Ω–∏ —Å—Ç–∞—Ç—Ç—è–º–∏...');
      await enrichLawsWithArticles();
    }
    
    logger.info('=' .repeat(60));
    logger.info('üìä –ü–Ü–î–°–£–ú–û–ö:');
    logger.info(`‚úÖ –î–æ–¥–∞–Ω–æ: ${added}`);
    logger.info(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ —ñ—Å–Ω—É—é—Ç—å): ${skipped}`);
    logger.info(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${failed}`);
    logger.info(`üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${Math.round((added / (added + failed)) * 100)}%`);
    
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

module.exports = { addLawToDatabase, enrichLawsWithArticles };
